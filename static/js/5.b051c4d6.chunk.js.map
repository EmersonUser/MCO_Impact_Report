{"version":3,"file":"static/js/5.b051c4d6.chunk.js","mappings":"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","sources":["pages/MCOImpactReport/MCOImpactReportPartRevTable.jsx","pages/MCOImpactReport/MCOImpactReportMBOMConnectionTable.jsx","pages/MCOImpactReport/dataHelpers.js","hooks/useMBOMImpactReport.js","hooks/useMBOMImpactReportDropableArea.js","pages/MCOImpactReport/DragAndDrop.jsx","pages/MCOImpactReport/MBOMImpactReport.jsx","pages/MCOImpactReport/MBOMImpactReportIndex.js"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport './MCOTables.css';\r\n\r\nconst MCOImpactReportPartRevTable = ({ columns, data }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 10;\r\n\r\n  // Filtered data\r\n  const filteredData = useMemo(() => {\r\n    return data.filter((row) =>\r\n      columns.some((col) =>\r\n        String(row[col.accessorKey])\r\n          .toLowerCase()\r\n          .includes(searchText.toLowerCase())\r\n      )\r\n    );\r\n  }, [searchText, data, columns]);\r\n\r\n  // Paginated data\r\n  const paginatedData = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    return filteredData.slice(startIndex, startIndex + itemsPerPage);\r\n  }, [filteredData, currentPage]);\r\n\r\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\r\n\r\n  const handleExport = () => {\r\n    const worksheet = XLSX.utils.json_to_sheet(filteredData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n\r\n    const excelBuffer = XLSX.write(workbook, {\r\n      bookType: \"xlsx\",\r\n      type: \"array\",\r\n    });\r\n\r\n    const blob = new Blob([excelBuffer], {\r\n      type: \"application/octet-stream\",\r\n    });\r\n    saveAs(blob, \"exported-data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid p-0 mt-3\">\r\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n        {/* <input\r\n          type=\"text\"\r\n          className=\"form-control w-50\"\r\n          placeholder=\"Search...\"\r\n          value={searchText}\r\n          onChange={(e) => {\r\n            setSearchText(e.target.value);\r\n            setCurrentPage(1);\r\n          }}\r\n        />\r\n        <button className=\"btn btn-success\" onClick={handleExport}>\r\n          Export to Excel\r\n        </button> */}\r\n      </div>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table custom-table table-hover\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              {columns.map((col) => (\r\n                <th key={col.accessorKey}>{col.header}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {paginatedData.length > 0 ? (\r\n              paginatedData.map((row, idx) => (\r\n                <tr key={idx}>\r\n                  {columns.map((col) => (\r\n                    <td key={col.accessorKey}>{row[col.accessorKey]}</td>\r\n                  ))}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={columns.length} className=\"text-center\">\r\n                  No data found.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between align-items-center mt-3\">\r\n        <p className=\"mb-0\">\r\n          Showing {(currentPage - 1) * itemsPerPage + 1} to{\" \"}\r\n          {Math.min(currentPage * itemsPerPage, filteredData.length)} of{\" \"}\r\n          {filteredData.length} entries\r\n        </p>\r\n\r\n        <div>\r\n          <button\r\n            className=\"btn btn-outline-primary mx-1\"\r\n            disabled={currentPage === 1}\r\n            onClick={() => setCurrentPage((prev) => prev - 1)}\r\n          >\r\n            Prev\r\n          </button>\r\n          <span>{currentPage}</span>\r\n          <button\r\n            className=\"btn btn-outline-primary mx-1\"\r\n            disabled={currentPage === totalPages}\r\n            onClick={() => setCurrentPage((prev) => prev + 1)}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCOImpactReportPartRevTable;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport './MCOTables.css';\r\n\r\nconst MCOImpactReportMBOMConnectionTable = ({ columns, data }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 10;\r\n\r\n  // Filtered data\r\n  const filteredData = useMemo(() => {\r\n    return data.filter((row) =>\r\n      columns.some((col) =>\r\n        String(row[col.accessorKey])\r\n          .toLowerCase()\r\n          .includes(searchText.toLowerCase())\r\n      )\r\n    );\r\n  }, [searchText, data, columns]);\r\n\r\n  // Paginated data\r\n  const paginatedData = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    return filteredData.slice(startIndex, startIndex + itemsPerPage);\r\n  }, [filteredData, currentPage]);\r\n\r\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\r\n\r\n//   const handleExport = () => {\r\n//     const worksheet = XLSX.utils.json_to_sheet(filteredData);\r\n//     const workbook = XLSX.utils.book_new();\r\n//     XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n\r\n//     const excelBuffer = XLSX.write(workbook, {\r\n//       bookType: \"xlsx\",\r\n//       type: \"array\",\r\n//     });\r\n\r\n//     const blob = new Blob([excelBuffer], {\r\n//       type: \"application/octet-stream\",\r\n//     });\r\n//     saveAs(blob, \"exported-data.xlsx\");\r\n//   };\r\n\r\n  return (\r\n    <div className=\"container-fluid p-0 mt-3\">\r\n      {/* <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control w-50\"\r\n          placeholder=\"Search...\"\r\n          value={searchText}\r\n          onChange={(e) => {\r\n            setSearchText(e.target.value);\r\n            setCurrentPage(1);\r\n          }}\r\n        />\r\n        <button className=\"btn btn-success\" onClick={handleExport}>\r\n          Export to Excel\r\n        </button>\r\n      </div> */}\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table custom-table table-hover\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              {columns.map((col) => (\r\n                <th key={col.accessorKey}>{col.header}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {paginatedData.length > 0 ? (\r\n              paginatedData.map((row, idx) => (\r\n                <tr key={idx}>\r\n                  {columns.map((col) => (\r\n                    <td key={col.accessorKey}>{row[col.accessorKey]}</td>\r\n                  ))}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={columns.length} className=\"text-center\">\r\n                  No data found.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between align-items-center mt-3\">\r\n        <p className=\"mb-0\">\r\n          Showing {(currentPage - 1) * itemsPerPage + 1} to{\" \"}\r\n          {Math.min(currentPage * itemsPerPage, filteredData.length)} of{\" \"}\r\n          {filteredData.length} entries\r\n        </p>\r\n\r\n        <div>\r\n          <button\r\n            className=\"btn btn-outline-primary mx-1\"\r\n            disabled={currentPage === 1}\r\n            onClick={() => setCurrentPage((prev) => prev - 1)}\r\n          >\r\n            Prev\r\n          </button>\r\n          <span>{currentPage}</span>\r\n          <button\r\n            className=\"btn btn-outline-primary mx-1\"\r\n            disabled={currentPage === totalPages}\r\n            onClick={() => setCurrentPage((prev) => prev + 1)}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCOImpactReportMBOMConnectionTable;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        ItemRev: data?.ItemRev || \"N/A\",\r\n        ItemType: data?.ItemType || \"N/A\",\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Name\" },\r\n      { accessorKey: \"ItemRev\", header: \"Rev\" },\r\n      { accessorKey: \"ItemType\", header: \"Type\" },\r\n      { accessorKey: \"ItemPolicy\", header: \"Policy\"},\r\n      { accessorKey: \"ItemMakeBuy\", header: \"Make/Buy\" },\r\n      { accessorKey: \"ItemSeq\", header: \"Sequence\" },\r\n      { accessorKey: \"ItemPrevSeqMCO\", header: \"Prev. Seq. MCO\" },\r\n      { accessorKey: \"ItemPrevSeqStartDate\", header: \"Prev. Seq. Start Date\" },\r\n      { accessorKey: \"ItemNextSeqMCO\", header: \"Next Seq MCO\" },\r\n      { accessorKey: \"ItemNextSeqStartDate\", header: \"Next Seq Start Date\" },\r\n    ];\r\n  }\r\n};\r\n\r\n\r\nexport const tableColumnsMBOMConnections = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemFromPart\", header: \"From Part\" },\r\n      { accessorKey: \"ItemToPart\", header: \"To Part\" },\r\n      { accessorKey: \"ItemFindNumber\", header: \"F/N\" },\r\n      { accessorKey: \"ItemRefDes\", header: \"Ref Des\"},\r\n      { accessorKey: \"ItemMfgUsageCode\", header: \"Manufacturing Usage Code\" },\r\n      { accessorKey: \"ItemSeq\", header: \"Sequence\" },\r\n      { accessorKey: \"ItemPrevSeqMCO\", header: \"Prev. Seq. MCO\" },\r\n      { accessorKey: \"ItemPrevSeqStartDate\", header: \"Prev. Seq. Start Date\" },\r\n      { accessorKey: \"ItemNextSeqMCO\", header: \"Next Seq MCO\" },\r\n      { accessorKey: \"ItemNextSeqStartDate\", header: \"Next Seq Start Date\" },\r\n      { accessorKey: \"ItemChildMCO\", header: \"Child MCO\" },\r\n      { accessorKey: \"ItemChildStartDate\", header: \"Child Start Date\" },\r\n    ];\r\n  }\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n  setMCAItemDetails,\r\n  setMCAItemObjectDetails,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\n\r\nconst useMBOMImpactReport = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n\r\n                // if (change.target === \"NewVersion\") {\r\n                //   const sLatestID = await getLatestRevision(\r\n                //     ItemId,\r\n                //     ItemType,\r\n                //     headers\r\n                //   );\r\n                //   if (realizedChanges.includes(sLatestID)) {\r\n                //     ItemId = sLatestID;\r\n                //   }\r\n                // }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                //   const mfgDetails = await getScopedItms(ItemId, headers);\r\n                //   console.log(\"MFG Details are:\", mfgDetails);\r\n                //   ItemId = mfgDetails.identifier;\r\n                //   ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    const [ItemPlants, Iteminfo] = await Promise.all([\r\n                      getAssignedClasses(ItemId, headers),\r\n                      getItemDetails(ItemId, ItemType, headers),\r\n                    ]);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemRev: Iteminfo?.member[0].revision || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                    });\r\n                    console.log(\"MCA ItemDetails\", ItemDetails);\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        //dispatch(setParentDetailsLoading(false));\r\n        dispatch(setMCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        //dispatch(setMCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default useMBOMImpactReport;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}?mask=dsmfg:MfgItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useMBOMImpactReport from \"./useMBOMImpactReport\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useMBOMImpactReportDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = useMBOMImpactReport();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useMBOMImpactReportDropableArea;","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./MBOMImpactReport.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          // className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        {/* <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div> */}\r\n        {/* <SearchInput onSearch={handleSearch} /> */}\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              {/* <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button> */}\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              {/* <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group> */}\r\n            </div>\r\n            {/* <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div> */}\r\n            {/* <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./MBOMImpactReport.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport MCOImpactReportPartRevTable from \"./MCOImpactReportPartRevTable\";\r\nimport MCOImpactReportMBOMConnectionTable from \"./MCOImpactReportMBOMConnectionTable\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n  tableColumnsMBOMConnections,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useMBOMImpactReportDropableArea from \"../../hooks/useMBOMImpactReportDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport MBOMImpactReportToolbarNativeCta from \"./MBOMImpactReportToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst MBOMImpactReport = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useMBOMImpactReportDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useMBOMImpactReportDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.MCAItemObjectDetails.MCAItemDetails\r\n  );\r\n  console.log(\"The MCA Item Details are:\", CAItemDetails);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  \r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } \r\n  }, [ type, CAItemDetails]);\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the Part rev table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  // Define columns for the Part rev table\r\n  const MBOMConnectionColumns = useMemo(\r\n    () => tableColumnsMBOMConnections(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"[MBOMImpactReport] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  console.log(\"Before template render :: columns ::\", columns)\r\n  console.log(\"Before template render :: tableData ::\", tableData)\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"MBOMImpactReport\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              {/* <Loader /> */}\r\n            </div>\r\n          ) : (\r\n            <>\r\n            \r\n              <div className=\"wrapper-cta\" style={{ overflowY: 'auto' }}>\r\n              <h3 style={{ marginTop: '16px', marginLeft: '10px' }}>Part Revisions</h3>\r\n              <div className=\"table-container\">\r\n                <MCOImpactReportPartRevTable\r\n                  columns={columns}\r\n                  data={tableData}\r\n                />\r\n                </div>\r\n                \r\n              <h3 style={{ marginTop: '16px', marginLeft: '10px' }}>MBOM Connections</h3>\r\n              <div className=\"table-container\">\r\n                <MCOImpactReportMBOMConnectionTable\r\n                  columns={MBOMConnectionColumns}\r\n                  data={tableData}\r\n                />\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      \r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MBOMImpactReport;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport MBOMImpactReport from \"./MBOMImpactReport\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      {/* <WidgetLifecycle /> */}\r\n      <MBOMImpactReport />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","columns","data","searchText","setSearchText","useState","currentPage","setCurrentPage","filteredData","useMemo","filter","row","some","col","String","accessorKey","toLowerCase","includes","paginatedData","startIndex","slice","totalPages","Math","ceil","length","_jsxs","className","children","_jsx","map","header","idx","colSpan","min","disabled","onClick","prev","getTableData","tableData","type","CAData","console","log","ItemName","ItemTitle","ItemRev","ItemType","ItemId","Change","CAName","Plant","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","useMBOMImpactReport","showErrorToast","useToast","dispatch","useDispatch","email","window","widget","getValue","handlePlantAssignment","async","collabSpace","state","objectId","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","isMFGCA","fetchChangeActionData","CAURL","concat","response","callEnoviaWebService","status","output","realizedChanges","realizedChange","where","identifier","changeProcessingPromises","proposedChanges","change","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","Promise","all","getAssignedClasses","getItemDetails","push","ItemState","member","revision","ItemMBOM","EMR_hasMBOM","err","error","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setMCAItemDetails","setIsMFGCA","userGroupCollab","getUserGroupCollab","allCollabSpaces","warn","plants","fetchAssignedPlants","success","setPlantObjectData","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","plantIdData","url","itemResponse","ClassificationAttributes","forEach","classification","classId","ClassID","plantName","erpStatus","Attributes","attribute","name","value","PlantName","PlantID","PlantERPStatus","useMBOMImpactReportDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","usePlantDropableArea","performSearch","useInterComSearch","_Fragment","Image","style","width","height","src","alt","class","MBOMImpactReport","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","isRemoveMode","setIsRemoveMode","showSuccessToast","securityContext1","useRef","handleRemovePlant","itemId","plantId","item","_objectSpread","plant","color","droppedObjectData","CAItemDetails","MCAItemObjectDetails","MCAItemDetails","loadingParentDetails","plantObjectData","useEffect","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","Title","Type","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","MBOMConnectionColumns","tableColumnsMBOMConnections","current","Loader","display","flexDirection","justifyContent","position","DragAndDropComponent","event","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","parentDetails","versions","initialAssignedPlants","uniquePlants","productChildren","setCAItemObjectDetails","CAallPlants","CAisMFGCA","CAheaders","CardWithDragAndDrop","widgetType","overflowY","marginTop","marginLeft","MCOImpactReportPartRevTable","MCOImpactReportMBOMConnectionTable","ContentErrorsModal","show","onHide","errors","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","id","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}